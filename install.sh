#!/bin/bash

# This script installs or uninstalls the 'workspace' command-line tool.
# It is designed to be portable, resilient, and to provide a rich out-of-the-box experience.

set -e # Exit on any error

# --- Configuration ---
INSTALL_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
BIN_DIR="$INSTALL_DIR/bin"
SRC_SCRIPT="$INSTALL_DIR/scripts/workspace"
DEST_LINK="$BIN_DIR/workspace"
CONFIG_DIR="$HOME/.config/workspace"
CONFIG_SCRIPT="$CONFIG_DIR/workspace.sh"
WARM_SCRIPT_PATH="$INSTALL_DIR/scripts/warm_workspaces.sh"
BASHRC_TEMPLATE_PATH="$INSTALL_DIR/bash/.bashrc"

# --- Helper Functions ---

abort() {
    echo "Error: $1" >&2
    exit 1
}

check_dependencies() {
    echo "(1/5) Checking for dependencies..."
    local core_deps=("git" "sqlite3" "rsync")
    local optional_deps=("fzf" "autojump")
    local missing_deps=()

    for cmd in "${core_deps[@]}" "${optional_deps[@]}"; do
        if ! command -v "$cmd" &>/dev/null; then
            missing_deps+=("$cmd")
        fi
    done

    if [ ${#missing_deps[@]} -eq 0 ]; then
        echo "  - All dependencies are installed."
        return
    fi

    echo "Warning: The following dependencies are missing: ${missing_deps[*]}"

    local pm_base_cmd=""
    local needs_sudo=true
    if command -v apt-get &>/dev/null; then pm_base_cmd="apt-get install -y";
    elif command -v yum &>/dev/null; then pm_base_cmd="yum install -y";
    elif command -v dnf &>/dev/null; then pm_base_cmd="dnf install -y";
    elif command -v pacman &>/dev/null; then pm_base_cmd="pacman -S --noconfirm";
    elif command -v brew &>/dev/null; then pm_base_cmd="brew install"; needs_sudo=false; fi

    if [ -z "$pm_base_cmd" ]; then
        echo "Could not detect a package manager. Please install the missing dependencies manually." >&2
    else
        echo "Attempting to install dependencies without sudo..."
        if ! sh -c "$pm_base_cmd ${missing_deps[*]}" 2>/dev/null; then
            echo "  - Failed. Checking for sudo..."
            if [ "$needs_sudo" = false ]; then
                 echo "Installation failed. Please try installing missing dependencies manually." >&2
            elif ! command -v sudo &>/dev/null; then
                echo "`sudo` command not found. Please install the missing dependencies manually." >&2
            else
                local install_command_with_sudo="sudo $pm_base_cmd ${missing_deps[*]}"
                echo "This script can attempt to install them for you using sudo." >&2
                read -p "May I run the following command? [Y/n] `echo $'\n'`    $install_command_with_sudo `echo $'\n'`> " -n 1 -r
                echo

                if [[ $REPLY =~ ^[Yy]$ ]] || [[ -z $REPLY ]]; then
                    echo "Attempting to install dependencies with sudo..."
                    if ! sh -c "$install_command_with_sudo"; then
                        echo "Installation with sudo failed. Please try installing them manually." >&2
                    fi
                else
                     echo "Installation declined." >&2
                fi
            fi
        else
            echo "  - Success!"
        fi
    fi

    # Final check for core dependencies
    local still_missing_core=()
    for cmd in "${core_deps[@]}"; do
        if ! command -v "$cmd" &>/dev/null; then
            still_missing_core+=("$cmd")
        fi
    done

    if [ ${#still_missing_core[@]} -ne 0 ]; then
        abort "Core dependencies (${still_missing_core[*]}) are required. Please install them and re-run this script."
    fi
}


install_oh_my_bash() {
    echo -e "\n(2/5) Checking for Oh My Bash..."
    if [ ! -d "$HOME/.oh-my-bash" ]; then
        echo "  - Oh My Bash not found. Cloning..."
        if ! git clone https://github.com/ohmybash/oh-my-bash.git "$HOME/.oh-my-bash"; then
            abort "Failed to clone Oh My Bash."
        fi
    else
        echo "  - Oh My Bash is already installed."
    fi
}

setup_shell_config() {
    echo -e "\n(3/5) Creating shell function and configuration..."
    mkdir -p "$CONFIG_DIR"
    cat << EOF > "$CONFIG_SCRIPT"
#!/bin/sh
# Auto-generated by the workspace installer.

workspace() {
    local executable="$DEST_LINK"
    local output=\$(\$executable "\$@")
    local exit_code=\$?

    if [ \$exit_code -eq 0 ]; then
        if [[ "\$output" == "__cd__:"* ]]; then
            local dir_to_change_to=\${output#__cd__:}
            if [ -d "\$dir_to_change_to" ]; then
                cd "\$dir_to_change_to"
            else
                echo "Error: Target directory '\$dir_to_change_to' does not exist." >&2
            fi
        else
            echo "\$output"
        fi
    else
        echo "\$output" >&2
    fi
}

_warm_workspaces() {
    if [ -f \"$WARM_SCRIPT_PATH\" ]; then
        bash \"$WARM_SCRIPT_PATH\" &>/dev/null &
    fi
}
EOF
    echo "  - Created $CONFIG_SCRIPT"
}

update_user_profile() {
    echo -e "\n(4/5) Updating user's shell profile..."
    local shell_profile="$HOME/.bashrc"
    local source_line="source \"$CONFIG_SCRIPT\""
    local init_comment="# Initialize workspace tool"

    if [ ! -f "$shell_profile" ] && [ -f "$BASHRC_TEMPLATE_PATH" ]; then
        echo "  - No .bashrc found. Copying pre-configured template..."
        cp "$BASHRC_TEMPLATE_PATH" "$shell_profile"
        sed -i.bak 's|bash \"$HOME/dotfiles/scripts/warm_workspaces.sh\" &|_warm_workspaces &|' "$shell_profile"
        rm -f "${shell_profile}.bak"
    fi

    if ! grep -qF -- "$source_line" "$shell_profile"; then
        echo "  - Adding workspace tool initialization to $shell_profile..."
        printf "\n%s\n%s\n" "$init_comment" "$source_line" >> "$shell_profile"
    fi
    echo "  - Shell profile is up to date."
}

setup_executable() {
    echo -e "\n(5/5) Setting up executable..."
    mkdir -p "$BIN_DIR"
    chmod +x "$SRC_SCRIPT" "$WARM_SCRIPT_PATH"
    ln -sf "$SRC_SCRIPT" "$DEST_LINK"
    echo "  - Linked $SRC_SCRIPT to $DEST_LINK"
}


install() {
    echo "Starting installation of the 'workspace' tool..."
    check_dependencies
    install_oh_my_bash
    setup_shell_config
    update_user_profile
    setup_executable

    echo -e "\n--- Installation Complete ---"
    echo "To finish, please run: source ~/.bashrc"
}

uninstall() {
    echo "Starting uninstallation of the 'workspace' tool..."
    read -p "Are you sure you want to uninstall? This will remove the main command and configuration. [y/N] " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Uninstallation cancelled."
        exit 0
    fi

    # 1. Remove shell integration
    echo " - Removing shell profile integration..."
    local shell_profile="$HOME/.bashrc"
    local source_line_pattern="source.*$CONFIG_SCRIPT"
    local init_comment="# Initialize workspace tool"
    if [ -f "$shell_profile" ]; then
        sed -i.bak -e "/^${init_comment}$/{N;/${source_line_pattern}/d;}" "$shell_profile"
        # Clean up empty lines that might be left
        sed -i.bak 'G;/^\s*$/d' "$shell_profile"
        rm -f "${shell_profile}.bak"
        echo "  - Removed integration from $shell_profile."
    fi

    # 2. Remove executable and bin directory
    echo " - Removing executable link..."
    if [ -L "$DEST_LINK" ]; then
        rm "$DEST_LINK"
        echo "  - Removed $DEST_LINK."
    fi
    if [ -d "$BIN_DIR" ] && [ -z "$(ls -A "$BIN_DIR")" ]; then
        rmdir "$BIN_DIR"
        echo "  - Removed empty bin directory."
    fi

    # 3. Remove config directory
    echo " - Removing configuration directory..."
    if [ -d "$CONFIG_DIR" ]; then
        rm -rf "$CONFIG_DIR"
        echo "  - Removed $CONFIG_DIR."
    fi

    # 4. Ask to remove user data
    local WORKSPACE_BASE_DIR="$HOME/Workspaces"
    local EPHEMERAL_CACHE_DIR="$HOME/.cache/ephemeral_workspaces"
    local DB_FILE="$HOME/.workspace_history.db"

    echo " - The uninstaller can also remove user-generated data."
    read -p "  - Delete all workspaces in '$WORKSPACE_BASE_DIR'? THIS IS IRREVERSIBLE. [y/N] " -n 1 -r; echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then rm -rf "$WORKSPACE_BASE_DIR" && echo "    - Removed workspaces directory."; fi

    read -p "  - Delete the ephemeral cache in '$EPHEMERAL_CACHE_DIR'? THIS IS IRREVERSIBLE. [y/N] " -n 1 -r; echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then rm -rf "$EPHEMERAL_CACHE_DIR" && echo "    - Removed ephemeral cache."; fi

    read -p "  - Delete the workspace history database ('$DB_FILE')? [y/N] " -n 1 -r; echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then rm -f "$DB_FILE" && echo "    - Removed history database."; fi

    echo -e "\n--- Uninstallation Complete ---"
    echo "Please run 'source ~/.bashrc' to finalize the process."
    echo "You can now safely delete the installation directory: $INSTALL_DIR"
}

# --- Main Script ---
if [ "$(id -u)" -eq 0 ]; then abort "This script must not be run as root."; fi

if [ "$1" = "--uninstall" ]; then
    uninstall
else
    install
fi
