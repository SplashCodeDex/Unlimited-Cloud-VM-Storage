#!/bin/bash\n\n# This script installs or uninstalls the \'workspace\' command-line tool.\n# It is designed to be portable, resilient, and to provide a rich out-of-the-box experience.\n\nset -e # Exit on any error\n\n# --- Configuration ---\nINSTALL_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" &>/dev/null && pwd)\"\nBIN_DIR=\"$INSTALL_DIR/bin\"\nSRC_SCRIPT=\"$INSTALL_DIR/scripts/workspace\"\nDEST_LINK=\"$BIN_DIR/workspace\"\nCONFIG_DIR=\"$HOME/.config/workspace\"\nCONFIG_SCRIPT=\"$CONFIG_DIR/workspace.sh\"\nWARM_SCRIPT_PATH=\"$INSTALL_DIR/scripts/warm_workspaces.sh\"\nBASHRC_TEMPLATE_PATH=\"$INSTALL_DIR/bash/.bashrc\"\n\n# --- Helper Functions ---\n\nabort() {\n    echo \"Error: $1\" >&2\n    exit 1\n}\n\ncheck_dependencies() {\n    echo \"(1/5) Checking for dependencies...\"\n    local core_deps=(\"git\" \"sqlite3\" \"rsync\")\n    local optional_deps=(\"fzf\")\n    local missing_core=()\n    local missing_optional=()\n\n    for cmd in \"${core_deps[@]}\"; do if ! command -v \"$cmd\" &>/dev/null; then missing_core+=(\"$cmd\"); fi; done\n    for cmd in \"${optional_deps[@]}\"; do if ! command -v \"$cmd\" &>/dev/null; then missing_optional+=(\"$cmd\"); fi; done\n\n    if [ ${#missing_core[@]} -ne 0 ] || [ ${#missing_optional[@]} -ne 0 ]; then\n        local all_missing=(\"${missing_core[@]}\" \"${missing_optional[@]}\")\n        echo \"Warning: Missing dependencies. For the best experience, please install them.\"\n        local pm_cmd=\"\"\n        if command -v apt-get &>/dev/null; then pm_cmd=\"sudo apt-get install -y ${all_missing[*]}\";\n        elif command -v yum &>/dev/null; then pm_cmd=\"sudo yum install -y ${all_missing[*]}\";\n        elif command -v dnf &>/dev/null; then pm_cmd=\"sudo dnf install -y ${all_missing[*]}\";\n        elif command -v pacman &>/dev/null; then pm_cmd=\"sudo pacman -S --noconfirm ${all_missing[*]}\";\n        elif command -v brew &>/dev/null; then pm_cmd=\"brew install ${all_missing[*]}\"; fi\n\n        if [ -n \"$pm_cmd\" ]; then\n            echo \"We recommend you run: $pm_cmd\" >&2\n        else\n            echo \"Please install the missing dependencies (${all_missing[*]}) using your system\'s package manager.\" >&2\n        fi\n        if [ ${#missing_core[@]} -ne 0 ]; then abort \"Core dependencies (${missing_core[*]}) are required.\"; fi\n    else\n        echo \"  - All dependencies are installed.\"\n    fi\n}\n\ninstall_oh_my_bash() {\n    echo -e \"\\n(2/5) Checking for Oh My Bash...\"\n    if [ ! -d \"$HOME/.oh-my-bash\" ]; then\n        echo \"  - Oh My Bash not found. Cloning...\"\n        if ! git clone https://github.com/ohmybash/oh-my-bash.git \"$HOME/.oh-my-bash\"; then\n            abort \"Failed to clone Oh My Bash.\"\n        fi\n    else\n        echo \"  - Oh My Bash is already installed.\"\n    fi\n}\n\nsetup_shell_config() {\n    echo -e \"\\n(3/5) Creating shell function and configuration...\"\n    mkdir -p \"$CONFIG_DIR\"\n    # This is the crucial part: defining the shell function that can actually change the directory.\n    cat << EOF > \"$CONFIG_SCRIPT\"\n#!/bin/sh\n# Auto-generated by the workspace installer.\n\n# This function calls the real workspace script and handles directory changes.\nworkspace() {\n    # The actual executable is stored in the bin directory.\n    local executable=\"$DEST_LINK\"\n\n    # Run the executable, capturing its output.\n    local output=\$(\$executable \"\$@\")\n    local exit_code=\$?\n\n    if [ \$exit_code -eq 0 ]; then\n        # Check if the output is a command to change directory.\n        if [[ \"\$output\" == \"__cd__:\"* ]]; then\n            # Extract the directory path after the \"__cd__:\" prefix.\n            local dir_to_change_to=\${output#__cd__:}\n            if [ -d \"\$dir_to_change_to\" ]; then\n                cd \"\$dir_to_change_to\"\n            else\n                echo \"Error: Target directory \'\$dir_to_change_to\' does not exist.\" >&2\n            fi\n        else\n            # If it's not a cd command, just print the output.\n            echo \"\$output\"\n        fi\n    else\n        # If the script returned an error, print it to stderr.\n        echo \"\$output\" >&2\n    fi\n}\n\n# Function to warm workspaces in the background\n_warm_workspaces() {\n    if [ -f \\\"$WARM_SCRIPT_PATH\\\" ]; then\n        bash \\\"$WARM_SCRIPT_PATH\\\" &>/dev/null &\n    fi\n}\nEOF\n    echo \"  - Created $CONFIG_SCRIPT\"\n}\n\nupdate_user_profile() {\n    echo -e \"\\n(4/5) Updating user\'s shell profile...\"\n    local shell_profile=\"$HOME/.bashrc\"\n    local source_line=\"source \\\"$CONFIG_SCRIPT\\\"\"\n    local init_comment=\"# Initialize workspace tool\"\n\n    if [ ! -f \"$shell_profile\" ] && [ -f \"$BASHRC_TEMPLATE_PATH\" ]; then\n        echo \"  - No .bashrc found. Copying pre-configured template...\"\n        cp \"$BASHRC_TEMPLATE_PATH\" \"$shell_profile\"\n        # Make the workspace warming dynamic\n        sed -i.bak \'s|bash \"$HOME/dotfiles/scripts/warm_workspaces.sh\" &|_warm_workspaces &|\' \"$shell_profile\"\n        rm -f \"${shell_profile}.bak\"\n    fi\n\n    if ! grep -qF -- \"$source_line\" \"$shell_profile\"; then\n        echo \"  - Adding workspace tool initialization to $shell_profile...\"\n        printf \"\\n%s\\n%s\\n\" \"$init_comment\" \"$source_line\" >> \"$shell_profile\"\n    fi\n    echo \"  - Shell profile is up to date.\"\n}\n\nsetup_executable() {\n    echo -e \"\\n(5/5) Setting up executable...\"\n    mkdir -p \"$BIN_DIR\"\n    chmod +x \"$SRC_SCRIPT\" \"$WARM_SCRIPT_PATH\"\n    ln -sf \"$SRC_SCRIPT\" \"$DEST_LINK\"\n    echo \"  - Linked $SRC_SCRIPT to $DEST_LINK\"\n}\n\n\ninstall() {\n    echo \"Starting installation of the \'workspace\' tool...\"\n    check_dependencies\n    install_oh_my_bash\n    setup_shell_config\n    update_user_profile\n    setup_executable\n\n    echo -e \"\\n--- Installation Complete ---\"\n    echo \"To finish, please run: source ~/.bashrc\"\n}\n\n# --- Main Script ---\nif [ \"$(id -u)\" -eq 0 ]; then abort \"This script must not be run as root.\"; fi\nif [ \"$1\" = \"--uninstall\" ]; then echo \"Uninstall not yet implemented in this version\"; else install; fi\n