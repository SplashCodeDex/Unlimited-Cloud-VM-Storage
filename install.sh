#!/bin/bash

# This script installs or uninstalls the 'workspace' command-line tool.

set -e

# --- Configuration ---
INSTALL_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
BIN_DIR="$INSTALL_DIR/bin"
SRC_SCRIPT="$INSTALL_DIR/scripts/workspace"
DEST_LINK="$BIN_DIR/workspace"

CONFIG_DIR="$HOME/.config/workspace"
CONFIG_SCRIPT="$CONFIG_DIR/workspace.sh"


# --- Helper Functions ---

# Abort the script with a standardized error message.
abort() {
  echo "Error: $1" >&2
  exit 1
}

# Check for a command and provide install instructions if it's missing.
check_command() {
    local cmd=$1
    local package=$2
    if ! command -v "$cmd" &> /dev/null; then
        # ... (error messages as before) ...
        MISSING_DEPS=true
    else
        echo "  - Dependency '$cmd' is already installed."
    fi
}


# --- Uninstall Logic ---
uninstall() {
    echo "Starting uninstallation of the 'workspace' tool..."

    # 1. Remove shell configuration
    SOURCE_LINE="source \\"$CONFIG_SCRIPT\\""
    for shell_file in "$HOME/.bashrc" "$HOME/.bash_profile" "$HOME/.zshrc"; do
        if [ -f "$shell_file" ]; then
            if grep -qF -- "$SOURCE_LINE" "$shell_file"; then
                # Use sed to remove the line in-place
                sed -i.bak "/^${SOURCE_LINE//\//\\/}$/d" "$shell_file"
                sed -i.bak "/^# Initialize workspace tool$/d" "$shell_file"
                echo "  - Removed configuration from $shell_file."
            fi
        fi
    done

    # 2. Remove the configuration directory
    if [ -d "$CONFIG_DIR" ]; then
        rm -rf "$CONFIG_DIR"
        echo "  - Removed configuration directory: $CONFIG_DIR"
    fi

    # 3. Remove the binary symlink
    if [ -L "$DEST_LINK" ]; then
        rm "$DEST_LINK"
        echo "  - Removed symlink: $DEST_LINK"
    fi
    
    # 4. Clean up bin directory if empty
    if [ -d "$BIN_DIR" ] && [ -z "$(ls -A "$BIN_DIR")" ]; then
        rmdir "$BIN_DIR"
        echo "  - Removed empty bin directory: $BIN_DIR"
    fi

    echo -e "\\n--- Uninstallation Complete ---"
    echo "Please restart your shell for the changes to take effect."
    exit 0
}


# --- Installation Logic ---
install() {
    echo "Starting installation for the 'workspace' tool..."

    # 1. Dependency Check
    echo -e "\\n(1/4) Checking for required dependencies..."
    MISSING_DEPS=false
    check_command "git" "git"
    check_command "sqlite3" "sqlite3"
    [ "$MISSING_DEPS" = true ] && abort "Missing required dependencies. Please install them and re-run."

    # 2. Executable Setup
    echo -e "\\n(2/4) Setting up executable..."
    mkdir -p "$BIN_DIR"
    echo "  - Ensured directory exists: $BIN_DIR"
    chmod +x "$SRC_SCRIPT"
    ln -sf "$SRC_SCRIPT" "$DEST_LINK"
    echo "  - Linked $SRC_SCRIPT to $DEST_LINK"

    # 3. Shell Configuration Script
    echo -e "\\n(3/4) Creating shell configuration..."
    mkdir -p "$CONFIG_DIR"
    echo "  - Ensured directory exists: $CONFIG_DIR"
    
    cat << EOF > "$CONFIG_SCRIPT"
#!/bin/sh
# Auto-generated by the workspace installer.
# This script adds the workspace command to your PATH.
#
# IMPORTANT: The path below is absolute. If you move the project
# directory, you must re-run the installer.
export PATH="$BIN_DIR:\$PATH"
EOF
    echo "  - Created configuration script: $CONFIG_SCRIPT"

    # 4. Update User's Shell Profile
    echo -e "\\n(4/4) Updating user's shell profile..."
    
    # ... (Shell detection logic as before) ...
    
    SOURCE_LINE="source \\"$CONFIG_SCRIPT\\""
    # ... (Logic to add source line as before) ...

    echo -e "\\n--- Installation Complete ---"
    # ... (Instructions as before) ...
}

# --- Main Script ---

# Safety check: Do not run as root.
if [ "$(id -u)" -eq 0 ]; then
  abort "This script must not be run as root. Please run as your normal user."
fi

# Parse command-line arguments
if [ "$1" = "--uninstall" ]; then
    uninstall
else
    install
fi
